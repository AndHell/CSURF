/* DO NOT EDIT! generated by ./autogen */

.intel_syntax noprefix

#include "uintbig_namespace.h"
#include "fp_namespace.h"

.section .rodata

.set pbits,513
.set pbytes,72
.set plimbs,9
.inv_min_p_mod_r: /* -p^-1 mod 2^64 */
    .quad 0x3819994fe2345799

.global fp_0
fp_0:
    .zero 72

.global fp_1
fp_1: /* 2^576 mod p */
    .quad 0x00121da5043f7572, 0x59e2598d6cf63973, 0x045aaf56c365665b, 0xdfff9d0d60e7966f
    .quad 0x34ec63519a604235, 0x4214ede22e0da656, 0xe5ed103e0feb14f0, 0x36b03ffe780d5cfd
    .quad 1

.global fp_2
fp_2: /* 2^577 mod p */
    .quad 0x8253df50a4edf78d, 0xb04730a48513a29b, 0x463f84d3adc9ea39, 0x99f387c7026b208a
    .quad 0xbe45d9d1d8ac024f, 0xe872c54c6eb09bbb, 0x5f203388b029fb83, 0x962919f710bf6d1a
    .quad 0

.r_squared_mod_p: /* (2^576)^2 mod p */
    .quad 0x2165a6c2e5cfef27, 0x297a5783bc2b77d8, 0x26a61e46ace04f52, 0x490dbb288c451826
    .quad 0xf5156c2532fb4779, 0x1b06ae81b5c6dcde, 0x484721183c3ca8bb, 0x7e8de6dd6652eec3
    .quad 1

.p_minus_1_halves:
    .quad 0x3ee82dfcb1c879ab, 0x81bec13b2a6c6825, 0xe13aececec80713e, 0x1305d929dfb20629
    .quad 0x55c97668ae0a410e, 0x4ddb8b3bf6b55878, 0xb65cf679b7d6172e, 0xeb9bb302efada670
    .quad 0

.section .data
.global fp_mulsq_count
fp_mulsq_count:
    .quad 0
.global fp_sq_count
fp_sq_count:
    .quad 0
.global fp_addsub_count
fp_addsub_count:
    .quad 0

.section .text
.p2align 4,,15

.global fp_copy
fp_copy:
    cld
    mov rcx, plimbs
    rep movsq
    ret

.global fp_cmov
fp_cmov:
    movzx rax, dl
    neg rax
    .set k, 0
    .rept plimbs
        mov rcx, [rdi + 8*k]
        mov rdx, [rsi + 8*k]

        xor rdx, rcx
        and rdx, rax
        xor rcx, rdx

        mov [rdi + 8*k], rcx

        .set k, k+1
    .endr
    ret

.global fp_cswap
fp_cswap:
    movzx rax, dl
    neg rax
    .set k, 0
    .rept plimbs
        mov rcx, [rdi + 8*k]
        mov rdx, [rsi + 8*k]

        mov r8, rcx
        xor r8, rdx
        and r8, rax

        xor rcx, r8
        xor rdx, r8

        mov [rdi + 8*k], rcx
        mov [rsi + 8*k], rdx

        .set k, k+1
    .endr
    ret

.reduce_once:
    push rbp
    sub rsp, 8
    mov rbp, rdi

    mov rdi, [rbp + 0]
    sub rdi, [rip + uintbig_p + 0]
    movq [rsp + 0], rdi
    mov rsi, [rbp + 8]
    sbb rsi, [rip + uintbig_p + 8]
    mov rdx, [rbp + 16]
    sbb rdx, [rip + uintbig_p + 16]
    mov rcx, [rbp + 24]
    sbb rcx, [rip + uintbig_p + 24]
    mov r8,  [rbp + 32]
    sbb r8,  [rip + uintbig_p + 32]
    mov r9,  [rbp + 40]
    sbb r9,  [rip + uintbig_p + 40]
    mov r10, [rbp + 48]
    sbb r10, [rip + uintbig_p + 48]
    mov r11, [rbp + 56]
    sbb r11, [rip + uintbig_p + 56]
    mov rdi, [rbp + 64]
    sbb rdi, [rip + uintbig_p + 64]

    setnc al
    movzx rax, al
    neg rax

.macro cswap2, r, m
    xor \r, \m
    and \r, rax
    xor \m, \r
.endm

    cswap2 rsi, [rbp + 8]
    cswap2 rdx, [rbp + 16]
    cswap2 rcx, [rbp + 24]
    cswap2 r8, [rbp + 32]
    cswap2 r9, [rbp + 40]
    cswap2 r10, [rbp + 48]
    cswap2 r11, [rbp + 56]
    cswap2 rdi, [rbp + 64]
    movq rdi, [rsp + 0]
    cswap2 rdi, [rbp + 0]

    add rsp, 8
    pop rbp
    ret

.global fp_add2
fp_add2:
    mov rdx, rdi
.global fp_add3
fp_add3:
    addq [fp_addsub_count+rip],1
    push rdi
    call uintbig_add3
    pop rdi
    jmp .reduce_once

.global fp_sub2
fp_sub2:
  mov rdx, rdi
  xchg rsi, rdx
.global fp_sub3
fp_sub3:
    addq [fp_addsub_count+rip],1
    push rdi
    call uintbig_sub3
    pop rdi
    neg rax

    sub rsp, pbytes

    mov rcx, [rip + uintbig_p +  0]
    and rcx, rax
    mov [rsp + 0],rcx
    .set k, 1
    .rept plimbs-1
        mov rcx, [rip + uintbig_p + 8*k]
        and rcx, rax
        mov [rsp + 8*k], rcx
        .set k, k+1
    .endr

    mov rcx, [rsp +  0]
    add rcx, [rdi +  0]
    mov [rdi +  0], rcx
    .set k, 1
    .rept plimbs-1
        mov rcx, [rsp + 8*k]
        adc rcx, [rdi + 8*k]
        mov [rdi + 8*k], rcx
        .set k, k+1
    .endr

    add rsp, pbytes
    ret


/* Montgomery arithmetic */

.global fp_mul2
fp_mul2:
  mov rdx, rdi
.global fp_mul3
fp_mul3:
    push rbp
    push rbx

  addq [fp_mulsq_count+rip],1

  sub rsp,88
  mov [rsp+80],rdi
  mov rdi,rsi
  mov rsi,rdx

  /* XXX: put directly into output */
  xor rax,rax
  mov [rsp+0],rax
  mov [rsp+8],rax
  mov [rsp+16],rax
  mov [rsp+24],rax
  mov [rsp+32],rax
  mov [rsp+40],rax
  mov [rsp+48],rax
  mov [rsp+56],rax
  mov [rsp+64],rax
  mov [rsp+72],rax

.macro MULSTEP, k, I0, I1, I2, I3, I4, I5, I6, I7, I8, I9

    mov r11,[rsp+\I0]
    mov rdx, [rsi +  0]
    mulx rcx, rdx, [rdi + 8*\k]
    add rdx, r11
    mulx rcx, rdx, [rip + .inv_min_p_mod_r]

    xor rax, rax /* clear flags */

    mulx rbx, rax, [rip + uintbig_p +  0]
    adox r11, rax
    mov [rsp+\I0],r11

    mov r11,[rsp+\I1]
    mulx rcx, rax, [rip + uintbig_p + 8]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I1],r11

    mov r11,[rsp+\I2]
    mulx rbx, rax, [rip + uintbig_p + 16]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I2],r11

    mov r11,[rsp+\I3]
    mulx rcx, rax, [rip + uintbig_p + 24]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I3],r11

    mov r11,[rsp+\I4]
    mulx rbx, rax, [rip + uintbig_p + 32]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I4],r11

    mov r11,[rsp+\I5]
    mulx rcx, rax, [rip + uintbig_p + 40]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I5],r11

    mov r11,[rsp+\I6]
    mulx rbx, rax, [rip + uintbig_p + 48]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I6],r11

    mov r11,[rsp+\I7]
    mulx rcx, rax, [rip + uintbig_p + 56]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I7],r11

    mov r11,[rsp+\I8]
    mulx rbx, rax, [rip + uintbig_p + 64]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I8],r11

    mov r11,[rsp+\I9]
    mov rax, 0
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I9],r11

    mov rdx, [rdi + 8*\k]

    xor rax, rax /* clear flags */

    mov r11,[rsp+\I0]
    mulx rbx, rax, [rsi +  0]
    adox r11, rax
    mov [rsp+\I0],r11

    mov r11,[rsp+\I1]
    mulx rcx, rax, [rsi + 8]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I1],r11

    mov r11,[rsp+\I2]
    mulx rbx, rax, [rsi + 16]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I2],r11

    mov r11,[rsp+\I3]
    mulx rcx, rax, [rsi + 24]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I3],r11

    mov r11,[rsp+\I4]
    mulx rbx, rax, [rsi + 32]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I4],r11

    mov r11,[rsp+\I5]
    mulx rcx, rax, [rsi + 40]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I5],r11

    mov r11,[rsp+\I6]
    mulx rbx, rax, [rsi + 48]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I6],r11

    mov r11,[rsp+\I7]
    mulx rcx, rax, [rsi + 56]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I7],r11

    mov r11,[rsp+\I8]
    mulx rbx, rax, [rsi + 64]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I8],r11

    mov r11,[rsp+\I9]
    mov rax, 0
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I9],r11

.endm

    MULSTEP 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 0
    MULSTEP 1, 16, 24, 32, 40, 48, 56, 64, 72, 0, 8
    MULSTEP 2, 24, 32, 40, 48, 56, 64, 72, 0, 8, 16
    MULSTEP 3, 32, 40, 48, 56, 64, 72, 0, 8, 16, 24
    MULSTEP 4, 40, 48, 56, 64, 72, 0, 8, 16, 24, 32
    MULSTEP 5, 48, 56, 64, 72, 0, 8, 16, 24, 32, 40
    MULSTEP 6, 56, 64, 72, 0, 8, 16, 24, 32, 40, 48
    MULSTEP 7, 64, 72, 0, 8, 16, 24, 32, 40, 48, 56
    MULSTEP 8, 72, 0, 8, 16, 24, 32, 40, 48, 56, 64

    mov rdi,[rsp+80]

    mov r11,[rsp+0]
    mov [rdi+0],r11
    mov r11,[rsp+8]
    mov [rdi+8],r11
    mov r11,[rsp+16]
    mov [rdi+16],r11
    mov r11,[rsp+24]
    mov [rdi+24],r11
    mov r11,[rsp+32]
    mov [rdi+32],r11
    mov r11,[rsp+40]
    mov [rdi+40],r11
    mov r11,[rsp+48]
    mov [rdi+48],r11
    mov r11,[rsp+56]
    mov [rdi+56],r11
    mov r11,[rsp+64]
    mov [rdi+64],r11

    add rsp,88

    pop rbx
    pop rbp
    jmp .reduce_once

.global fp_sq1
fp_sq1:
    mov rsi, rdi
.global fp_sq2
fp_sq2:
    /* TODO implement optimized Montgomery squaring */
    mov rdx, rsi
    addq [fp_sq_count+rip],1
    jmp fp_mul3

