/* DO NOT EDIT! generated by ./autogen */

.intel_syntax noprefix

#include "uintbig_namespace.h"

.section .rodata

.global uintbig_1
uintbig_1:
    .quad 1, 0, 0, 0
    .quad 0, 0, 0, 0
    .quad 0

.global uintbig_p
uintbig_p:
    .quad 0x7dd05bf96390f357, 0x037d827654d8d04a, 0xc275d9d9d900e27d, 0x260bb253bf640c53
    .quad 0xab92ecd15c14821c, 0x9bb71677ed6ab0f0, 0x6cb9ecf36fac2e5c, 0xd7376605df5b4ce1
    .quad 1

.global uintbig_p_cofactor
uintbig_p_cofactor:
    .quad 0x0000000000000018, 0, 0, 0
    .quad 0, 0, 0, 0
    .quad 0

.global uintbig_four_sqrt_p
uintbig_four_sqrt_p:
    .quad 0x5212ec47f32e1aaf, 0xdc3ee61b5d6272db, 0xe9ae7f4386175e96, 0x6d47ffa46a45c00d
    .quad 5, 0, 0, 0
    .quad 0

.global uintbig_p_add1_div4
uintbig_p_add1_div4:
    .quad 0x9f7416fe58e43cd6, 0x40df609d95363412, 0xf09d76767640389f, 0x0982ec94efd90314
    .quad 0x2ae4bb3457052087, 0x26edc59dfb5aac3c, 0x5b2e7b3cdbeb0b97, 0x75cdd98177d6d338
    .quad 0

.section .text

.global uintbig_set
uintbig_set:
    cld
    mov rax, rsi
    stosq
    xor rax, rax
    mov rcx, 8
    rep stosq
    ret


.global uintbig_bit
uintbig_bit:
    mov rcx, rsi
    and rcx, 0x3f
    shr rsi, 6
    mov rax, [rdi + 8*rsi]
    shr rax, cl
    and rax, 1
    ret


.global uintbig_add3
uintbig_add3:
    mov rax, [rsi +  0]
    add rax, [rdx +  0]
    mov [rdi +  0], rax
    .set k, 1
    .rept 8
        mov rax, [rsi + 8*k]
        adc rax, [rdx + 8*k]
        mov [rdi + 8*k], rax
        .set k, k+1
    .endr
    setc al
    movzx rax, al
    ret

.global uintbig_sub3
uintbig_sub3:
    mov rax, [rsi +  0]
    sub rax, [rdx +  0]
    mov [rdi +  0], rax
    .set k, 1
    .rept 8
        mov rax, [rsi + 8*k]
        sbb rax, [rdx + 8*k]
        mov [rdi + 8*k], rax
        .set k, k+1
    .endr
    setc al
    movzx rax, al
    ret


.global uintbig_mul3_64
uintbig_mul3_64:

    mulx r10, rax, [rsi +  0]
    mov [rdi +  0], rax

    mulx r11, rax, [rsi + 8]
    add  rax, r10
    mov [rdi + 8], rax

    mulx r10, rax, [rsi + 16]
    adcx rax, r11
    mov [rdi + 16], rax

    mulx r11, rax, [rsi + 24]
    adcx rax, r10
    mov [rdi + 24], rax

    mulx r10, rax, [rsi + 32]
    adcx rax, r11
    mov [rdi + 32], rax

    mulx r11, rax, [rsi + 40]
    adcx rax, r10
    mov [rdi + 40], rax

    mulx r10, rax, [rsi + 48]
    adcx rax, r11
    mov [rdi + 48], rax

    mulx r11, rax, [rsi + 56]
    adcx rax, r10
    mov [rdi + 56], rax

    mulx r10, rax, [rsi + 64]
    adcx rax, r11
    mov [rdi + 64], rax

    ret
