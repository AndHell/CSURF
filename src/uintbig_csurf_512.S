/* DO NOT EDIT! generated by ./autogen */

.intel_syntax noprefix

#include "uintbig_namespace.h"

.section .rodata

.global uintbig_1
uintbig_1:
    .quad 1, 0, 0, 0
    .quad 0, 0, 0, 0

.global uintbig_p
uintbig_p:
    .quad 0x3d1777e13d738927, 0x680d6665c95ec473, 0xf4a5aa25285fc714, 0x5ee8aa9f9e03818b
    .quad 0x4adeb896376b0795, 0x96552e0e2a136021, 0x020936b7b52ec195, 0x40d4703145d63961

.global uintbig_p_cofactor
uintbig_p_cofactor:
    .quad 0x00000000000001a8, 0, 0, 0
    .quad 0, 0, 0, 0

.global uintbig_four_sqrt_p
uintbig_four_sqrt_p:
    .quad 0x2aca4c9cc448792c, 0xae1825115b931de5, 0xd89a5ebc6d4e5c10, 0x034f0425fa80b042
    .quad 2, 0, 0, 0

.global uintbig_p_add1_div4
uintbig_p_add1_div4:
    .quad 0xcf45ddf84f5ce24a, 0x1a0359997257b11c, 0xfd296a894a17f1c5, 0x57ba2aa7e780e062
    .quad 0x52b7ae258ddac1e5, 0x65954b838a84d808, 0x40824daded4bb065, 0x10351c0c51758e58

.section .text

.global uintbig_set
uintbig_set:
    cld
    mov rax, rsi
    stosq
    xor rax, rax
    mov rcx, 7
    rep stosq
    ret


.global uintbig_bit
uintbig_bit:
    mov rcx, rsi
    and rcx, 0x3f
    shr rsi, 6
    mov rax, [rdi + 8*rsi]
    shr rax, cl
    and rax, 1
    ret


.global uintbig_add3
uintbig_add3:
    mov rax, [rsi +  0]
    add rax, [rdx +  0]
    mov [rdi +  0], rax
    .set k, 1
    .rept 7
        mov rax, [rsi + 8*k]
        adc rax, [rdx + 8*k]
        mov [rdi + 8*k], rax
        .set k, k+1
    .endr
    setc al
    movzx rax, al
    ret

.global uintbig_sub3
uintbig_sub3:
    mov rax, [rsi +  0]
    sub rax, [rdx +  0]
    mov [rdi +  0], rax
    .set k, 1
    .rept 7
        mov rax, [rsi + 8*k]
        sbb rax, [rdx + 8*k]
        mov [rdi + 8*k], rax
        .set k, k+1
    .endr
    setc al
    movzx rax, al
    ret


.global uintbig_mul3_64
uintbig_mul3_64:

    mulx r10, rax, [rsi +  0]
    mov [rdi +  0], rax

    mulx r11, rax, [rsi + 8]
    add  rax, r10
    mov [rdi + 8], rax

    mulx r10, rax, [rsi + 16]
    adcx rax, r11
    mov [rdi + 16], rax

    mulx r11, rax, [rsi + 24]
    adcx rax, r10
    mov [rdi + 24], rax

    mulx r10, rax, [rsi + 32]
    adcx rax, r11
    mov [rdi + 32], rax

    mulx r11, rax, [rsi + 40]
    adcx rax, r10
    mov [rdi + 40], rax

    mulx r10, rax, [rsi + 48]
    adcx rax, r11
    mov [rdi + 48], rax

    mulx r11, rax, [rsi + 56]
    adcx rax, r10
    mov [rdi + 56], rax

    ret
